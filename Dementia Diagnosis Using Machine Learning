import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt

# Step 1: Simulate a dataset for dementia diagnosis
# Features: Age, Cognitive Test Score, MRI Image Score (e.g., Brain Atrophy)
np.random.seed(42)

n_samples = 500
age = np.random.randint(60, 90, n_samples)
cognitive_test_score = np.random.normal(25, 5, n_samples)  # Simulate a test score (25-30 is typical)
mri_image_score = np.random.normal(50, 15, n_samples)  # MRI score (higher = more atrophy)
gender = np.random.choice(['Male', 'Female'], n_samples)
label = np.random.choice(['Healthy', 'Dementia'], n_samples, p=[0.7, 0.3])

# Build a dataframe
data = pd.DataFrame({
    'Age': age,
    'Cognitive_Test_Score': cognitive_test_score,
    'MRI_Score': mri_image_score,
    'Gender': gender,
    'Diagnosis': label
})

# Step 2: Preprocess the data
# Convert categorical gender data to numerical format
data['Gender'] = data['Gender'].map({'Male': 0, 'Female': 1})

# Features (X) and Label (y)
X = data[['Age', 'Cognitive_Test_Score', 'MRI_Score', 'Gender']]
y = data['Diagnosis']

# Encode labels (Healthy = 0, Dementia = 1)
le = LabelEncoder()
y_encoded = le.fit_transform(y)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 3: Build and train the neural network
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(X_train_scaled, y_train, epochs=50, batch_size=16, validation_split=0.2, verbose=0)

# Step 4: Evaluate the model
y_pred = model.predict(X_test_scaled).flatten()
y_pred_classes = (y_pred > 0.5).astype(int)

# Print classification results
print("\nClassification Report:")
print(classification_report(y_test, y_pred_classes, target_names=le.classes_))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_classes))

# Step 5: Plot Training History
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Training vs Validation Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training vs Validation Loss')
plt.legend()

plt.tight_layout()
plt.show()
